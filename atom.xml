<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemon</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-12T12:21:03.724Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Vage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>new关键字执行过程</title>
    <link href="http://example.com/2022/07/12/new%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2022/07/12/new%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</id>
    <published>2022-07-12T12:18:03.000Z</published>
    <updated>2022-07-12T12:21:03.724Z</updated>
    
    <content type="html"><![CDATA[<p>1、在内存中创建一个空对象</p><p>2、让this指向这个空对象</p><p>3、执行构造函数里面的代码，给这个空对象添加属性和方法</p><p>4、返回这个新创建的对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、在内存中创建一个空对象&lt;/p&gt;
&lt;p&gt;2、让this指向这个空对象&lt;/p&gt;
&lt;p&gt;3、执行构造函数里面的代码，给这个空对象添加属性和方法&lt;/p&gt;
&lt;p&gt;4、返回这个新创建的对象&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>什么是闭包</title>
    <link href="http://example.com/2022/07/12/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/"/>
    <id>http://example.com/2022/07/12/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/</id>
    <published>2022-07-12T12:10:20.000Z</published>
    <updated>2022-07-12T12:14:10.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、变量作用域"><a href="#1、变量作用域" class="headerlink" title="1、变量作用域"></a>1、变量作用域</h3><p>要理解闭包，首先要理解 JavasSript 的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>JavasSript 语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p><strong>注意点：</strong>在函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明的是一个全局变量！</p><p><strong>2、如何从外部读取函数内部的局部变量？</strong></p><p>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。</p><p>那就是在函数内部，再定义一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。</p><p>这就是 JavasSript 语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</p><h3 id="3、闭包的概念"><a href="#3、闭包的概念" class="headerlink" title="3、闭包的概念"></a>3、闭包的概念</h3><p>上面代码中的 f2 函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在 JavasSript 中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><h3 id="4、闭包的用途"><a href="#4、闭包的用途" class="headerlink" title="4、闭包的用途"></a>4、闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在 f1 调用后被自动清除。</p><p>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是 <strong>“nAdd=function(){n+=1}”</strong> 这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="5、使用闭包的注意点"><a href="#5、使用闭包的注意点" class="headerlink" title="5、使用闭包的注意点"></a>5、使用闭包的注意点</h3><ul><li>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、变量作用域&quot;&gt;&lt;a href=&quot;#1、变量作用域&quot; class=&quot;headerlink&quot; title=&quot;1、变量作用域&quot;&gt;&lt;/a&gt;1、变量作用域&lt;/h3&gt;&lt;p&gt;要理解闭包，首先要理解 JavasSript 的特殊的变量作用域。&lt;/p&gt;
&lt;p&gt;变量的作用域无非就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>this指向问题</title>
    <link href="http://example.com/2022/07/12/this-%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/07/12/this-%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-12T07:37:23.000Z</published>
    <updated>2022-07-13T11:45:44.644Z</updated>
    
    <content type="html"><![CDATA[<p>this指向：在定义的时候不能确定，只有在执行的时候才能确定this指向</p><p>1.在全局作用域中、普通函数调用、定时器里面、this指向window</p><p>2.方法调用中，谁调用这个方法，this就指向谁</p><p>3.事件注册的时候，this指向被绑定的元素</p><p>4.构造函数中，this指向的是构造函数的实例</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this指向：在定义的时候不能确定，只有在执行的时候才能确定this指向&lt;/p&gt;
&lt;p&gt;1.在全局作用域中、普通函数调用、定时器里面、this指向window&lt;/p&gt;
&lt;p&gt;2.方法调用中，谁调用这个方法，this就指向谁&lt;/p&gt;
&lt;p&gt;3.事件注册的时候，this指向被绑</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blog搭建</title>
    <link href="http://example.com/2022/07/07/blog%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/07/07/blog%E6%90%AD%E5%BB%BA/</id>
    <published>2022-07-07T08:43:50.533Z</published>
    <updated>2022-07-12T07:49:40.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-了解Node"><a href="#1-了解Node" class="headerlink" title="1. 了解Node"></a>1. 了解Node</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时, 它不是一门新的语言哈。</p><p>我们暂时不用太在意它的一些知识点，不需要现在学习。</p><p>目前只需要知道如何安装，然后如何使用一些简单的命令来实现我们现阶段想要做的功能。</p><h3 id="1-1-安装Node"><a href="#1-1-安装Node" class="headerlink" title="1.1 安装Node"></a>1.1 安装Node</h3><p>我们进入Node的官网  <a href="https://nodejs.org/zh-cn/">Node.js</a></p><ul><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">如何安装Node.js</a></li><li>查看安装好的版本</li><li>terminal 终端     <a href="https://blog.csdn.net/wxiao_xiao_miao/article/details/120228056">什么是终端?</a></li><li>win+R  输入 cmd  回车， 可以打开终端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看安装的node版本 </span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><ul><li>这里推荐安装长期维护版本 （LTS版本）（Long Term Support 长期支持维护的意思）</li></ul><h3 id="1-2-什么是npm"><a href="#1-2-什么是npm" class="headerlink" title="1.2 什么是npm"></a>1.2 什么是npm</h3><p>npm是随同Node.js一起安装的<strong>包管理工具</strong>, 我们可以通过<code>npm install</code>等一些命令安装我们需要的第三方包（库）</p><ul><li>查看版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><ul><li>安装第三方包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx</span><br><span class="line"><span class="comment"># 或者简写为</span></span><br><span class="line">npm i xxx</span><br></pre></td></tr></table></figure><h3 id="1-3-Git"><a href="#1-3-Git" class="headerlink" title="1.3 Git"></a>1.3 Git</h3><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p><p>从一般开发者的角度来看，git有以下功能：</p><p>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</p><p>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。</p><p>3、在单机上自己创建的分支上提交代码。</p><p>4、在单机上合并分支。</p><p>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</p><p>6、生成补丁（patch），把补丁发送给主开发者。</p><p>7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</p><p>8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</p><p>上图展示了git的整体架构，以及和各部分相关的主要命令。先说明下其中涉及的各部分。</p><p><strong>工作区(working directory)，</strong>简言之就是你工作的区域。对于git而言，就是的本地工作目录。工作区的内容会包含提交到暂存区和版本库(当前提交点)的内容，同时也包含自己的修改内容。</p><p><strong><a href="https://www.zhihu.com/search?q=%E6%9A%82%E5%AD%98%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:625881308%7D">暂存区</a>(stage area, 又称为索引区index)，</strong>是git中一个非常重要的概念。是我们把修改提交版本库前的一个过渡阶段。查看GIT自带帮助手册的时候，通常以index来表示暂存区。在工作目录下有一个.git的目录，里面有个index文件，存储着关于暂存区的内容。git add命令将工作区内容添加到暂存区。</p><p><strong>本地仓库(local repository)，</strong>版本控制系统的仓库，存在于本地。当执行git commit命令后，会将暂存区内容提交到仓库之中。在工作区下面有.git的目录，这个目录下的内容不属于工作区，里面便是仓库的数据信息，暂存区相关内容也在其中。这里也可以使用merge或rebase将<strong>远程仓库副本</strong>合并到本地仓库。图中的只有merge，注意这里也可以使用rebase。</p><p><strong>远程版本库(remote repository)，</strong>与本地仓库概念基本一致，不同之处在于一个存在远程，可用于远程协作，一个却是存在于本地。通过push/pull可实现本地与远程的交互；</p><p><strong>远程仓库副本，</strong>可以理解为存在于本地的远程仓库缓存。如需更新，可通过git fetch/pull命令获取远程仓库内容。使用fech获取时，并未合并到本地仓库，此时可使用git merge实现远程仓库副本与本地仓库的合并。git pull 根据配置的不同，可为git fetch + git merge 或 git fetch + git rebase。rebase和merge的区别可以自己去网上找些资料了解下。</p><p><strong>Git 的一些相关命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git --version  <span class="comment"># 查看git版本</span></span><br><span class="line">git <span class="built_in">clone</span>+ address<span class="comment"># 克隆某个从库</span></span><br><span class="line">git status     <span class="comment"># 查看当前修改状态</span></span><br><span class="line">git add .       <span class="comment"># 添加所有修改内容到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;msg&quot;</span> <span class="comment"># 将暂存区内容提交到本地仓库</span></span><br><span class="line">git push <span class="comment"># 将本地仓库内容，提交到远程仓库</span></span><br><span class="line">git pull                <span class="comment"># 将远程仓库内容拉取，并与本地仓库合并</span></span><br><span class="line">git fetch  <span class="comment"># 将远程仓库内容拉取到--&gt; 本地的远程仓库缓存中， 暂不合并到本地仓库。</span></span><br></pre></td></tr></table></figure><h2 id="2-了解静态blog"><a href="#2-了解静态blog" class="headerlink" title="2. 了解静态blog"></a>2. 了解静态blog</h2><p><a href="https://jamstack.org/generators/">https://jamstack.org/generators/</a></p><p>静态文档，什么是静态呢，就是说我们的数据都是本地准备好的，没有和后端做一个网络http请求上的数据交互。</p><p>比如说我们的typora笔记是markdown格式的，我们可以通过docsify这个第三方库，直接将我们的md文件生成静态文档，而不需要向后端请求动态数据。</p><p>静态文档(blog)的生成工具（库）有很多，常用的有</p><ul><li>hexo （基于node.js，可选主题很多）</li><li>hugo   （基于go，速度快）</li><li>vuePress （Vue官网就是通过它写的）</li><li>docsify  （轻量简洁）</li><li>next.js  （基于React SSR ，强大）</li></ul><p>大家以后有时间都可以尝试着搭建一下哈</p><h2 id="3-hexo"><a href="#3-hexo" class="headerlink" title="3. hexo"></a>3. hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  –&gt; 2012年</p><h3 id="3-1-安装Node-js-Git"><a href="#3-1-安装Node-js-Git" class="headerlink" title="3.1 安装Node.js / Git"></a>3.1 安装Node.js / Git</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><p><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><ul><li>太高会报warning警告  </li><li><code>nvm ls-remote --lts</code> 忽略这句，需要装nvm</li><li><a href="https://registry.npmmirror.com/binary.html?path=node/">https://registry.npmmirror.com/binary.html?path=node/</a>  node版本</li></ul></li><li><p><a href="http://git-scm.com/">Git</a></p><ul><li><a href="http://git-scm.com/download/mac">http://git-scm.com/download/mac</a></li><li><a href="http://git-scm.com/download/win">http://git-scm.com/download/win</a></li></ul></li></ul><h3 id="3-2-全局安装-hexo"><a href="#3-2-全局安装-hexo" class="headerlink" title="3.2 全局安装 hexo"></a>3.2 全局安装 hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="1-新建一个文件键-hexo-blog"><a href="#1-新建一个文件键-hexo-blog" class="headerlink" title="1. 新建一个文件键 hexo-blog"></a>1. 新建一个文件键 hexo-blog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install    <span class="comment"># npm i   # yarn install</span></span><br></pre></td></tr></table></figure><p>装好后, 文件内的目录结构大致如下</p><ul><li>看官方文档 - <a href="https://hexo.io/zh-cn/docs/setup">https://hexo.io/zh-cn/docs/setup</a></li></ul><p>其中，source存放我们的草稿和post文件。 theme是主题文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.<span class="property">yml</span></span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ol><li>_config.yml 网站配置信息 <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></li><li>package.json</li></ol><p><code>package.json</code> 文件是项目的清单。 它可以做很多完全互不相关的事情。 例如，它是用于工具的配置中心。 它也是 <code>npm</code> 和 <code>yarn</code> 存储所有已安装软件包的名称和版本的地方。</p><p>省略。。。</p><p>PS. </p><ul><li><p>淘宝镜像源 <a href="https://npmmirror.com/">https://npmmirror.com/</a></p></li><li><p>迁移2022-6-30： <a href="https://zhuanlan.zhihu.com/p/465424728?spm=a2c6h.24755359.0.0.6d444dccWMZOJM">https://zhuanlan.zhihu.com/p/465424728?spm=a2c6h.24755359.0.0.6d444dccWMZOJM</a></p></li></ul><h3 id="3-2-命令"><a href="#3-2-命令" class="headerlink" title="3.2 命令"></a>3.2 命令</h3><ol><li><strong>new</strong> 新建一篇文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new post title  <span class="comment"># 如果标题包含空格， 用“” 或&#x27;&#x27; 引起来</span></span><br><span class="line">hexo new post <span class="string">&quot;好好学习 天天向上&quot;</span></span><br><span class="line">hexo n <span class="string">&quot;第一篇博客&quot;</span>  <span class="comment"># 简写</span></span><br><span class="line">hexo n <span class="built_in">test</span>        <span class="comment"># 没有引号也可以</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>generate</strong> 生成静态文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo g        <span class="comment"># 简写</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>server</strong> 启动服务器 </li></ol><p>默认情况下，访问网址为： <code>http://localhost:4000/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">hexo s       <span class="comment"># 简写</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>deploy</strong>    部署</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">hexo d        # 简写</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>clean</strong>   清缓存</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="3-3-theme-主题"><a href="#3-3-theme-主题" class="headerlink" title="3.3 theme 主题"></a>3.3 theme 主题</h3><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>挑一个喜欢的安装~~~  Enjoy！</p><p>点击主题蓝色的文字 进入 github主题库的安装说明， 按步骤来就好了~~</p><p>For Example</p><p><strong>keep 主题</strong></p><p>If you’re using Hexo 5.0 or later, the simplest way to install is through npm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-keep</span><br></pre></td></tr></table></figure><p>Or you can clone the entire repository:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone https://github.com/XPoet/hexo-theme-keep themes/keep</span><br></pre></td></tr></table></figure><p>After the installation, open Hexo config file and set <code>theme</code> variable to <code>keep</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: keep</span><br></pre></td></tr></table></figure><p><strong>Next 主题</strong></p><h3 id="3-4-一键部署"><a href="#3-4-一键部署" class="headerlink" title="3.4 一键部署"></a>3.4 一键部署</h3><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="部署在Github"><a href="#部署在Github" class="headerlink" title="- 部署在Github"></a>- 部署在Github</h4><h4 id="1-github-中新建仓库"><a href="#1-github-中新建仓库" class="headerlink" title="1. github 中新建仓库!"></a>1. github 中新建仓库!</h4><h4 id="2-注意仓库命名"><a href="#2-注意仓库命名" class="headerlink" title="2. 注意仓库命名!"></a>2. 注意仓库命名!</h4><p><strong>注意: 我们的blog仓库名字 必须是 github 的 <code>用户名 +github.io </code>   ==&gt;    <code>username.github.io</code> !</strong></p><h4 id="3-复制仓库地址"><a href="#3-复制仓库地址" class="headerlink" title="3. 复制仓库地址"></a>3. 复制仓库地址</h4><h4 id="4-修改-config-yml中部署相关配置"><a href="#4-修改-config-yml中部署相关配置" class="headerlink" title="4. 修改_config.yml中部署相关配置"></a>4. 修改_config.yml中部署相关配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br><span class="line">  改为===&gt;</span><br><span class="line">  </span><br><span class="line">  deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: https://gitee.com/vrfe/hexo-blog.git   <span class="comment"># 刚才复制的地址</span></span><br><span class="line">  branch: master  <span class="comment"># 改为master     注意  冒号:后面有一个空格!</span></span><br></pre></td></tr></table></figure><h4 id="5-执行hexo打包发布命令"><a href="#5-执行hexo打包发布命令" class="headerlink" title="5. 执行hexo打包发布命令"></a>5. 执行hexo打包发布命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g   <span class="comment"># 产生部署文件  generate</span></span><br><span class="line">hexo d   <span class="comment"># deploy  部署 上传</span></span><br><span class="line"><span class="comment"># 可以简写合并 </span></span><br><span class="line">hexo g -d    <span class="comment"># 打包部署上传,  一键完成部署</span></span><br></pre></td></tr></table></figure><h4 id="2-部署在gitee"><a href="#2-部署在gitee" class="headerlink" title="- 2 部署在gitee"></a>- 2 部署在gitee</h4><ol start="2"><li>gitee中新建仓库</li></ol><ol start="2"><li>修改_config.yml中部署相关配置。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: https://gitee.com/vrfe/hexo-blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ol start="3"><li>执行命令</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"># 合并 </span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><hr><h2 id="4-docsify"><a href="#4-docsify" class="headerlink" title="4.docsify"></a>4.docsify</h2><ul><li><a href="https://docsify.js.org/#/zh-cn/quickstart">docsify-官网</a></li></ul><h3 id="4-1-全局安装"><a href="#4-1-全局安装" class="headerlink" title="4.1 全局安装"></a>4.1 全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br></pre></td></tr></table></figure><h3 id="4-2-本地预览"><a href="#4-2-本地预览" class="headerlink" title="4.2 本地预览"></a>4.2 本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 到 docs 目录，执行</span></span><br><span class="line">docsify serve</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-了解Node&quot;&gt;&lt;a href=&quot;#1-了解Node&quot; class=&quot;headerlink&quot; title=&quot;1. 了解Node&quot;&gt;&lt;/a&gt;1. 了解Node&lt;/h2&gt;&lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时, </summary>
      
    
    
    
    
  </entry>
  
</feed>
